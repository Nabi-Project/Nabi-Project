# Default values for nabi.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  deployConfig:
    environment: "staging"
    baseHostName: "nabi.hikaru.app"
    ingressClassName: "nabi-project-nginx"
    clusterIssuer: "letsencrypt-issuer"

############################################
# Nabi Cloudflared
############################################
nabi-cloudflared:
  enabled: false
  applicationSettings:
    # The FQDN of the tunnel you want to run
    tunnelHostName: ""
    # The UUID of the tunnel you want to run (Tunnel UUID)
    tunnelUUID: "b82e20b6-5623-42f3-b0b6-bd3b66d3980b"
    # The Name of the secret that you have already stored your credentials in:
    # NOTE: 
    #   Each tunnel has an associated "credentials file" which authorizes machines
    #   to run the tunnel. cloudflared will read this file from its local filesystem,
    #   and it'll be stored in a k8s secret.
    #
    #   By default, the credentials file will be created under ~/.cloudflared/<TUNNEL_UUID>.json
    #   when you run `cloudflared tunnel create`. You can move it into a secret by using:
    #   ```sh
    #   kubectl create -n <NAMESPACE> secret generic nabi-prod-tunnel-credentials \ 
    #      --from-file=credentials.json=/home/<USERNAME>/.cloudflared/<TUNNEL_UUID>.json
    #   ```
    secretName: "nabi-staging-tunnel-credentials"
    # The Service URL of the Ingress Controller that Cloudflared should route traffic to (see configmap.yaml for more details)
    service: "https://staging.internal.nabi.hikaru.app:443"

###############################################
# Ingress Nginx (Embedded Ingress Controller)
###############################################
ingress-nginx:
  enabled: false
  nameOverride: "staging-ingress"
  rbac:
    scope: true
  controller:
    # Limit the scope of the controller to a specific namespace
    scope:
      enabled: true
      service:
        loadBalancerIP: "192.168.0.13"

    ingressClassByName: true

    ingressClassResource:
      # Name of the ingressClass
      name: nabi-project-staging-nginx
      enabled: true
      controllerValue: "k8s.io/nabi-project-staging-nginx"

    # watchIngressWithoutClass: true

    # For backwards compatibility with ingress.class annotation, use ingressClass.
    # Algorithm is as follows, first ingressClassName is considered, if not present, controller looks for ingress.class annotation
    ingressClass: nabi-project-staging-nginx

    # admissionWebhooks:
      # enabled: false
    #   certManager:
    #     enabled: true
    #   patch:
    #     enabled: false

    

#############################################
# Nabi PWA
#############################################
nabi-pwa:
  image:
    repository: registry.internal.hikaru.app:443/nabi-pwa
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""
  
  # Should Nginx rewrite requests that come to the Endpoint?
  rewritePath: false
  # If So, what should it rewrite the requests to target? (annotation)
  rewriteTarget: "/$2"
  # The Path that this service will be taking requests at
  #   Note: If Rewriting Requests, make sure to specify a pattern for what part to rewrite
  hostPath: "/"
  # The Type of Path Matching to be used
  hostPathType: "Prefix"

#############################################
# Nabi TTS
#############################################
nabi-tts:
  repository: registry.internal.hikaru.app:443/nabi-tts
  pullPolicy: IfNotPresent
  image:
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""
  
  # Should Nginx rewrite requests that come to the Endpoint?
  rewritePath: true
  # If So, what should it rewrite the requests to target? (annotation)
  rewriteTarget: "/$2"
  # The Path that this service will be taking requests at
  #   Note: If Rewriting Requests, make sure to specify a pattern for what part to rewrite
  hostPath: "/api/voice(/|$)(.*)"
  # The Type of Path Matching to be used
  hostPathType: "Prefix"

#############################################
# Nabi NLU
#############################################
nabi-nlu:
  repository: registry.internal.hikaru.app:443/nabi-nlu
  pullPolicy: IfNotPresent
  image:
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""
  
  # Should Nginx rewrite requests that come to the Endpoint?
  rewritePath: true
  # If So, what should it rewrite the requests to target? (annotation)
  rewriteTarget: "/webhooks/rest/webhook/$2"
  # rewriteTarget: "/model/parse/$2"
  # The Path that this service will be taking requests at
  #   Note: If Rewriting Requests, make sure to specify a pattern for what part to rewrite
  hostPath: "/api/brain(/|$)(.*)"
  # hostPath: "/api/v0/nlu(/|$)(.*)"
  # The Type of Path Matching to be used
  hostPathType: "Prefix"

  applicationSettings:
    # Enable debug mode
    debugMode: false
    # Initial model to download and load if a model server or remote storage is not used. It has to be a URL (without auth) that points to a tar.gz file
    initialModel: "https://minio.internal.hikaru.app/nabi-brain/models/nabi-model-v2022-05-04_11-39-28.tar.gz"
    # Start the web server API in addition to the input channel (Spec. Enables NLU Only Endpoint Requests)
    enableAPI: true
    # CORS for the passed origin. Default is * to allow all origins
    cors: "*.nabi.hikaru.app"